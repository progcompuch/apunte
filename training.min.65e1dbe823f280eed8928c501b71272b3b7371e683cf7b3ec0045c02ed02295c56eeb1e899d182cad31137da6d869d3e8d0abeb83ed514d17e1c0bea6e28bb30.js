const path=window.location.pathname,trainingNames=[["1: Variables y estructura de control if/else","2: Ciclos","3: STL (vectores, matrices, sets, pairs, etc)"],["Búsqueda Binaria / Dos Punteros","Grafos: BFS / DFS / Dijkstra / DSU","Programación Dinámica","Estructuras de Datos"],["Grafos 2: Minimum Spanning Tree / Camino más corto","Teoría de números / Conteo","Programación Dinámica 2","Estructuras de Datos 2","algoritmo de mo"],["Grafos 3: Flujo y matchings","Binary Lifting","Small to Large","Técnicas en árboles 1","Teoría de juegos"],["Estructuras de Datos 3","Teoría de números 2","Probabilistas","Sistemas de ecuaciones lineales"]],trainingContents=[[[""],[""],[""]],[["Búsqueda Binaria","Dos Punteros"],["BFS","DFS","Dijkstra","DSU"],["Programación Dinámica"],["Segment Tree (normal)"]],[["Algoritmo de Kruskal","Bellman Ford","Floyd Warshall"],["Aritmética Modular","Criba de Eratóstenes","Inverso Modular","Números Binomiales"],["Programación Dinámica","sqrt decomposition"],["Segment Tree (Lazy)"],["algoritmo de mo","algoritmo de mo 3d"]],[["maxflow","mincut","hungarian"],["binary lifting"],["small to large"],["binary lifting","small to large","rerooting","dfs tree"],["sprague grundy"]],[["segment tree persistente","segment tree dinamico"],["tests de primalidad","funciones multiplicativas","inversa de mobius","función phi de euler"],["probabilidades"],["Método de Gauss"]]],contests_ids=[["593411","593413","593415"],["567665","567946","567947","568427"],["585432","585434","585435","585436","585438"],["585583","585587","585588","585590","585591"],["585593","585595","585598","585600"]];let users=[{nickname:"dariasc",codeforcesId:"dariasc",codeforcesRating:1780,atcoderRating:1378,university:"UChile"},{nickname:"vivivi",codeforcesId:"vivivi",codeforcesRating:1624,atcoderRating:0,university:"UChile"},{nickname:"m1tu",codeforcesId:"m1tu",codeforcesRating:1621,atcoderRating:0,university:"UChile"},{nickname:"MapacheTactico",codeforcesId:"MapacheTactico",codeforcesRating:1292,atcoderRating:347,university:"UChile"},{nickname:"ElNChou",codeforcesId:"ElNChou",codeforcesRating:1405,atcoderRating:589,university:"UChile"},{nickname:"ilopez15",codeforcesId:"ilopez15",codeforcesRating:1254,atcoderRating:207,university:"UChile"},{nickname:"ant_metayer",codeforcesId:"ant_metayer",codeforcesRating:643,atcoderRating:0,university:"UChile"},{nickname:"AlePatata92",codeforcesId:"AlePatata92",codeforcesRating:908,atcoderRating:35,university:"UChile"},{nickname:"lu_0",codeforcesId:"lu_0",codeforcesRating:728,atcoderRating:0,university:"UChile"},{nickname:"patrici4",codeforcesId:"patrici4",codeforcesRating:0,atcoderRating:0,university:"UChile"},{nickname:"curauma03",codeforcesId:"curauma03",codeforcesRating:1046,atcoderRating:0,university:"UChile"},{nickname:"elJunaeb",codeforcesId:"elJunaeb",codeforcesRating:875,atcoderRating:0,university:"UChile"},{nickname:"Pansho721",codeforcesId:"Pansho721",codeforcesRating:912,atcoderRating:0,university:"UChile"},{nickname:"ThisIsThisAndThatIsThat",codeforcesId:"ThisIsThisAndThatIsThat",codeforcesRating:1015,atcoderRating:44,university:"UChile"},{nickname:"pauwu",codeforcesId:"pauwu",codeforcesRating:637,atcoderRating:0,university:"UChile"},{nickname:"ESnoRe",codeforcesId:"ESnoRe",codeforcesRating:0,atcoderRating:8,university:"UChile"},{nickname:"Vlxn",codeforcesId:"Vlxn",codeforcesRating:0,atcoderRating:16,university:"UChile"},{nickname:"niainamandis",codeforcesId:"niainamandis",codeforcesRating:0,atcoderRating:21,university:"UChile"},{nickname:"deragonie",codeforcesId:"deragonie",codeforcesRating:0,atcoderRating:0,university:"UChile"},{nickname:"abner_vidal",codeforcesId:"abner_vidal",codeforcesRating:1668,atcoderRating:292,university:"UTFSM"},{nickname:"Victorsitou",codeforcesId:"Victorsitou",codeforcesRating:1165,atcoderRating:13,university:"OCI"},{nickname:"fmunoz",codeforcesId:"fmunoz",codeforcesRating:1159,atcoderRating:0,university:"OCI"},{nickname:"Bors__",codeforcesId:"Bors__",codeforcesRating:408,atcoderRating:0,university:"OCI"},{nickname:"FranciscoPinhao",codeforcesId:"FranciscoPinhao",codeforcesRating:1258,atcoderRating:0,university:"OCI"},{nickname:"Nicolo_010",codeforcesId:"Nicolo_010",codeforcesRating:1259,atcoderRating:0,university:"OCI"},{nickname:"bastifwp",codeforcesId:"bastifwp",codeforcesRating:413,atcoderRating:0,university:"UTFSM"},{nickname:"storrealbac",codeforcesId:"storrealbac",codeforcesRating:1418,atcoderRating:76,university:"UTFSM"},{nickname:"poloyuyu",codeforcesId:"poloyuyu",codeforcesRating:1035,atcoderRating:0,university:"UTFSM"},{nickname:"skiesfallen",codeforcesId:"skiesfallen",codeforcesRating:363,atcoderRating:0,university:"UTFSM"},{nickname:"Rafoka",codeforcesId:"Rafoka",codeforcesRating:625,atcoderRating:0,university:"UTFSM"},{nickname:"albfr",codeforcesId:"albfr",codeforcesRating:1499,atcoderRating:73,university:"UDEC"},{nickname:"ccserm",codeforcesId:"ccserm",codeforcesRating:1250,atcoderRating:250,university:"UDEC"},{nickname:"sunrayito",codeforcesId:"sunrayito",codeforcesRating:1403,atcoderRating:0,university:"PUC"},{nickname:"amongas",codeforcesId:"amongas",codeforcesRating:843,atcoderRating:0,university:"PUC"}],complete_users_list=["JOliva","MrYhatoh","Marinkovic","Blaz","dariasc","vivivi","m1tu","AngrySeal","PathToMaster","MapacheTactico","ElNChou","ilopez15","ant_metayer","AlePatata92","lu_0","patrici4","svandich","Jayki","curauma03","elJunaeb","daridius","Pansho721","ThisIsThisAndThatIsThat","pauwu","Ciruela","davicom","lazyelekid","Zertex","ESnoRe","Vlxn","niainamandis","deragonie","abner_vidal","Victorsitou","fmunoz","Bors__","FranciscoPinhao","Nicolo_010","bastifwp","storrealbac","CharlesLakes","poloyuyu","skiesfallen","Rafoka","WrathionTBP","albfr","ccserm","sunrayito","amongas"];function getObjectSize(e){return new Blob([JSON.stringify(e)]).size+" bytes"}async function generateApiSig(e,t,n,s){const o=Math.random().toString(36).substring(2,8),i=Math.floor(Date.now()/1e3),a=Object.keys(t).sort().map(e=>`${e}=${t[e]}`).join("&"),r=`${o}/${e}?apiKey=${n}&${a}&time=${i}#${s}`,c=await crypto.subtle.digest("SHA-512",(new TextEncoder).encode(r)),l=Array.from(new Uint8Array(c)),d=l.map(e=>e.toString(16).padStart(2,"0")).join("");return{apiSig:`${o}${d}`,time:i}}async function fetchContestStatus(e,t,n,s,o,i){const c="contest.status",l={contestId:e,from:t,count:n,asManager:s},{apiSig:d,time:u}=await generateApiSig(c,l,o,i),h=`https://codeforces.com/api/${c}?apiKey=${o}&asManager=${s}&contestId=${e}&count=${n}&from=${t}&time=${u}&apiSig=${d}`,a=await fetch(h);if(!a.ok)return console.error("Error fetching contest status:",a.statusText),[];const r=await a.json();return r.status!=="OK"?(console.error("API returned an error:",r.comment),[]):r.result}async function fetchContestStandings(e,t,n){const a=!0,r=1,c=100,l=!0;participantTypes="PRACTICE";const d="contest.standings";let u=complete_users_list.join;const h={contestId:e,from:r,count:c,asManager:a,showUnofficial:l,participantTypes};u=complete_users_list.join(";");const{apiSig:m,time:f}=await generateApiSig(d,h,t,n),p=`https://codeforces.com/api/${d}?apiKey=${t}&asManager=${a}&contestId=${e}&count=${c}&from=${r}&participantTypes=${participantTypes}&showUnofficial=${l}&time=${f}&apiSig=${m}`,o=await fetch(p);if(await new Promise(e=>setTimeout(e,1e3)),!o.ok)return console.error("Error fetching contest standings:",o.statusText),[];const i=await o.json();return i.status!=="OK"?(console.error("API returned an error:",i.comment),[]):i.result}async function loadData(e,t){for(let a=0;a<trainingNames[t].length;a++){const f=document.getElementById(`tab-content-${a}`);if(!f){console.error(`Tab content ${a} not found.`);return}const l=f.querySelector("div table");if(!l){console.error(`Table not found in tab ${a}.`);return}const p=contests_ids[t][a];contest_data=e[p],problem_list=contest_data[0];let d=l.getElementsByTagName("tr")[0],o=d.children;if(o.length==0){let e=document.createElement("td");e.textContent="—",d.appendChild(e)}let i={},u={};for(let e=0;e<users.length;e++)i[users[e].codeforcesId]={crating:users[e].codeforcesRating,arating:users[e].atcoderRating},u[users[e].codeforcesId]={crating:users[e].codeforcesRating,arating:users[e].atcoderRating};let n=0;for(let e=0;e<contest_data[1].length;e++)if(user_handle=contest_data[1][e].handle,user_handle in i){let a=users.find(e=>e.codeforcesId===user_handle)?.university||"unknown";if(o.length<=n+1){let e=document.createElement("td");e.textContent="—",d.appendChild(e)}o[n+1].style.fontWeight="bold",o[n+1].setAttribute("data-university",a.toLowerCase());let t=i[user_handle].crating,s=i[user_handle].arating,e="";t<800&&s<200?e="rating-black":t<=1199&&s<=399?e="rating-gray":t<=1399&&s<=799?e="rating-green":t<=1599&&s<=1299?e="rating-cyan":t<=1899&&s<=1699?e="rating-blue":t<=2099&&s<=1999?e="rating-purple":t<=2399&&s<=2299?e="rating-orange":t<=2999&&s<=2999&&(e="rating-red"),o[n+1].innerHTML=`<span class="${e}">${user_handle}</span>`,delete i[user_handle],n+=1}for(const[a,r]of Object.entries(i)){let c=users.find(e=>e.codeforcesId===a)?.university||"unknown";if(o.length<=n+1){let e=document.createElement("td");e.textContent="—",d.appendChild(e)}o[n+1].style.fontWeight="bold",o[n+1].setAttribute("data-university",c.toLowerCase());let t=r.crating,s=r.arating,e="";t<800&&s<200?e="rating-black":t<=1199&&s<=399?e="rating-gray":t<=1399&&s<=799?e="rating-green":t<=1599&&s<=1299?e="rating-cyan":t<=1899&&s<=1699?e="rating-blue":t<=2099&&s<=1999?e="rating-purple":t<=2399&&s<=2299?e="rating-orange":t<=2999&&s<=2999&&(e="rating-red"),o[n+1].innerHTML=`<span class="${e}">${a}</span>`,n+=1}const h=l.insertRow(),r=h.insertCell(0);r.style.position="sticky",r.style.left="0",r.style.backgroundColor="#f8f9fa",r.textContent="Totales",r.style.fontWeight="bold";let s=0;for(let e=0;e<contest_data[1].length;e++)if(user_handle=contest_data[1][e].handle,user_handle in u){let o=users.find(e=>e.codeforcesId===user_handle)?.university||"unknown";const t=h.insertCell(s+1);t.setAttribute("data-university",o.toLowerCase());let n=0;for(let t=0;t<contest_data[1][e].solves.length;t++)contest_data[1][e].solves[t]==2&&(n+=1);t.textContent=n,s++}for(const[t,o]of Object.entries(i)){let n=users.find(e=>e.codeforcesId===t)?.university||"unknown";const e=h.insertCell(s+1);e.setAttribute("data-university",n.toLowerCase()),e.textContent=0,s+=1}const m=l.insertRow(),c=m.insertCell(0);c.style.position="sticky",c.style.left="0",c.style.backgroundColor="#f8f9fa",c.textContent="U",c.style.fontWeight="bold",s=0;for(let e=0;e<contest_data[1].length;e++)if(user_handle=contest_data[1][e].handle,user_handle in u){let t=users.find(e=>e.codeforcesId===user_handle)?.university||"unknown";const n=m.insertCell(s+1);n.setAttribute("data-university",t.toLowerCase());let e=document.createElement("img");e.src=`/images/universities/${t}.png`,e.alt=t,e.classList.add("university-logo"),n.appendChild(e),s++}for(const[o,a]of Object.entries(i)){let t=users.find(e=>e.codeforcesId===o)?.university||"unknown";const n=m.insertCell(s+1);n.setAttribute("data-university",t.toLowerCase());let e=document.createElement("img");e.src=`/images/universities/${t}.png`,e.alt=t,e.classList.add("university-logo"),n.appendChild(e),s+=1}for(let e=0;e<problem_list.length;e++){const o=l.insertRow(),t=o.insertCell(0);t.style.position="sticky",t.style.left="0",t.style.backgroundColor="#f8f9fa",t.style.fontWeight="bold";const n=document.createElement("a");n.href=problem_list[e].url,n.textContent=problem_list[e].name,n.target="_blank",n.rel="noopener noreferrer",t.appendChild(n);let s=0;for(let t=0;t<contest_data[1].length;t++)if(user_handle=contest_data[1][t].handle,user_handle in u){let a=users.find(e=>e.codeforcesId===user_handle)?.university||"unknown";const n=o.insertCell(s+1);n.setAttribute("data-university",a.toLowerCase());let i=contest_data[1][t].solves[e],r=i==2?"accepted":i==1?"attempted":"notAttempted";n.className=`task-score ${r}`,s++}for(const[t,a]of Object.entries(i)){let n=users.find(e=>e.codeforcesId===t)?.university||"unknown";const e=o.insertCell(s+1);e.setAttribute("data-university",n.toLowerCase()),e.className=`task-score notAttemped`,s+=1}}}}function setcache(){return[{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0}]}async function populateTables(e,t){const r=document.getElementById("gym-tab-content");if(!r){console.error("Tables container not found!");return}const c=path.split("/"),l=c.filter(e=>e!=="").pop(),d=l.replace(/\D/g,"");_lvlindxpath=parseInt(d);const u=trainingNames[_lvlindxpath],h=trainingContents[_lvlindxpath],s=document.getElementById("gym-tabs"),o=document.getElementById("gym-tab-content");s.innerHTML="",o.innerHTML="",u.forEach((e,t)=>{const i=document.createElement("li");i.classList.add("nav-item"),i.innerHTML=`
            <button class="nav-link ${t===0?"active":""}" id="tab-${t}"
                data-bs-toggle="tab" data-bs-target="#tab-content-${t}" type="button" role="tab"
                aria-controls="tab-content-${t}" aria-selected="${t===0}">
                ${e}
            </button>`,s.appendChild(i);const n=document.createElement("div");n.classList.add("tab-pane","fade"),t===0&&n.classList.add("show","active"),n.id=`tab-content-${t}`,n.setAttribute("role","tabpanel"),n.setAttribute("aria-labelledby",`tab-${t}`);let a="<h3>Contenidos</h3>";h[t].forEach(e=>{a+=`<span>${e}</span><br/>`}),a+=`
        <div style="overflow-x: auto;">
          <table class="table table-sm table-bordered cses-table" style="table-layout: auto; width: 100%;">
            <thead>
              <tr>
                <th style="position: sticky; left: 0; background-color: #f8f9fa; z-index: 1;">User</th>
              </tr>
            </thead>
            <tbody id="table-body-${t}"></tbody>
          </table>
        </div>
        `,n.innerHTML=a,o.appendChild(n)});let n=localStorage.getItem("gymCache");n!==null?n=JSON.parse(n):n=setcache(),Array.isArray(n)||(n=setcache());let i=new Date;if(n[_lvlindxpath].expires<i.getTime()){n[_lvlindxpath].data=[];for(let s=0;s<contests_ids[_lvlindxpath].length;s++){const o=contests_ids[_lvlindxpath][s],i=await Promise.resolve(fetchContestStandings(o,e,t,_lvlindxpath));i&&(standings_rows=i.rows,standings_problems=i.problems,data_rows=[],problem_names=[],standings_problems.forEach((e)=>{problem_names.push({name:e.name,url:"https://codeforces.com/gym/"+o+"/problem/"+e.index})}),standings_rows.forEach((e)=>{srow_handle=e.party.members[0].handle,srow_results=e.problemResults,results_data=[],srow_results.forEach((e)=>{results_data.push(e.points>0?2:e.rejectedAttemptCount>0?1:0)}),data_rows.push({handle:srow_handle,solves:results_data})}),n[_lvlindxpath].data[o]=[problem_names,data_rows])}n[_lvlindxpath].expires=i.getTime()+300*1e3,loadData(n[_lvlindxpath].data,_lvlindxpath)}else loadData(n[_lvlindxpath].data,_lvlindxpath);let a=document.getElementById("loading");a&&(a.style.display="none")}populateTables("e23005a4a475b6079a98c6c75f9d24408033ece7","d6c254ba481a12d0370517c93e2f4a2a5595586e")