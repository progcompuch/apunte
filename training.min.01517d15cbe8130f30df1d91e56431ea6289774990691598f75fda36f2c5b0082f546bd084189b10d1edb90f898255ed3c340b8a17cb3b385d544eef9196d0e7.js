const path=window.location.pathname,trainingNames=[["1: Variables y estructura de control if/else","2: Ciclos","3: STL (vectores, matrices, sets, pairs, etc)"],["Búsqueda Binaria / Dos Punteros","Grafos: BFS / DFS / Dijkstra / DSU","Programación Dinámica","Estructuras de Datos","X de Prefijos","Combinadas Básico I"],["Grafos 2: Minimum Spanning Tree / Camino más corto","Teoría de números / Conteo","Programación Dinámica 2","Estructuras de Datos 2","algoritmo de mo"],["Grafos 3: Flujo y matchings","Binary Lifting","Small to Large","Técnicas en árboles 1","Teoría de juegos"],["Estructuras de Datos 3","Teoría de números 2","Probabilistas","Sistemas de ecuaciones lineales"],["Problemas semanales 2025-1"],["Introductory Problems","Sorting and Searching","Dynamic Programming","Graph Algorithms","Range Queries","Tree Algorithms","Mathematics","String Algorithms","Geometry","Advanced Techniques","Sliding Window Problems","Interactive Problems","Bitwise Operations","Construction Problems","Advanced Graph Problems","Counting Problems","Additional Problems I","Additional Problems II"],["Problemas semanales 2025-2"]],trainingContents=[[[""],[""],[""]],[["Búsqueda Binaria","Dos Punteros"],["BFS","DFS","Dijkstra","DSU"],["Programación Dinámica"],["Segment Tree (normal)"],["Precomputación (mas o menos dp) en prefijos / sufijos 1D, 2D y 3D"],[""]],[["Algoritmo de Kruskal","Bellman Ford","Floyd Warshall"],["Aritmética Modular","Criba de Eratóstenes","Inverso Modular","Números Binomiales"],["Programación Dinámica","sqrt decomposition"],["Segment Tree (Lazy)"],["algoritmo de mo","algoritmo de mo 3d"]],[["maxflow","mincut","hungarian"],["binary lifting"],["small to large"],["binary lifting","small to large","rerooting","dfs tree"],["sprague grundy"]],[["segment tree persistente","segment tree dinamico"],["tests de primalidad","funciones multiplicativas","inversa de mobius","función phi de euler"],["probabilidades"],["Método de Gauss"]],[["Problemas de atcoder se actualizan una vez al día"]],[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],[["Problemas de atcoder se actualizan una vez al día"]]],contests_ids=[["0","1","2"],["3","4","5","6","43","44"],["7","8","9","10","11"],["12","13","14","15","16"],["17","18","19","20"],["21"],["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39"],["45"]];function getObjectSize(e){return new Blob([JSON.stringify(e)]).size+" bytes"}async function fetchContestStandings(e){const s=`https://joliva.cl/api/standings/${e}`;console.log(s);const n=await fetch(s);if(!n.ok)return console.error("Error fetching contest standings:",n.statusText),[];const t=await n.json();return t.status!=="OK"?(console.error("API returned an error:",t.comment),console.log(t),[]):t.result}async function loadData(e,t){for(let n=0;n<trainingNames[t].length;n++){const d=document.getElementById(`tab-content-${n}`);if(!d){console.error(`Tab content ${n} not found.`);return}const s=d.querySelector("div table");if(!s){console.error(`Table not found in tab ${n}.`);return}const m=contests_ids[t][n];contest_data=e[m];let l=s.getElementsByTagName("tr")[0],r=l.children;if(r.length==0){let e=document.createElement("td");e.textContent="-",l.appendChild(e)}let c=0;for(let s=1;s<contest_data[0].length;s++){let o=contest_data[0][s].nickname,i=contest_data[0][s].organization;if(r.length<=c+1){let e=document.createElement("td");e.textContent="-",l.appendChild(e)}let t=contest_data[0][s].codeforcesRating,n=contest_data[0][s].atcoderRating,e="";t<800&&n<200?e="rating-black":t<=1199&&n<=399?e="rating-gray":t<=1399&&n<=799?e="rating-green":t<=1599&&n<=1299?e="rating-cyan":t<=1899&&n<=1699?e="rating-blue":t<=2099&&n<=1999?e="rating-purple":t<=2399&&n<=2299?e="rating-orange":t<=2999&&n<=2999&&(e="rating-red"),r[c+1].innerHTML=`<span class="${e}">${o}</span>`,r[c+1].setAttribute("data-university",i.toLowerCase()),c+=1}const u=s.insertRow(),o=u.insertCell(0);o.style.position="sticky",o.style.left="0",o.style.backgroundColor="#f8f9fa",o.textContent="Totales",o.style.fontWeight="bold";let i=0;for(let e=1;e<contest_data[0].length;e++){let n=contest_data[0][e].organization;const t=u.insertCell(i+1);t.setAttribute("data-university",n.toLowerCase()),t.textContent=contest_data[0][e].solved_count,i++}const h=s.insertRow(),a=h.insertCell(0);a.style.position="sticky",a.style.left="0",a.style.backgroundColor="#f8f9fa",a.textContent="U",a.style.fontWeight="bold",i=0;for(let t=1;t<contest_data[0].length;t++){let n=contest_data[0][t].organization;const s=h.insertCell(i+1);s.setAttribute("data-university",n.toLowerCase());let e=document.createElement("img");e.src=`/images/universities/${n}.png`,e.alt=n,e.classList.add("university-logo"),s.appendChild(e),i++}for(let e=1;e<contest_data.length;e++){const o=s.insertRow(),t=o.insertCell(0);t.style.position="sticky",t.style.left="0",t.style.backgroundColor="#f8f9fa",t.style.fontWeight="bold";const n=document.createElement("a");n.href=contest_data[e][0].url,n.textContent=contest_data[e][0].name,n.target="_blank",n.rel="noopener noreferrer",t.appendChild(n);let i=0;for(let t=1;t<contest_data[e].length;t++){let a=contest_data[0][t].organization;const n=o.insertCell(i+1);n.setAttribute("data-university",a.toLowerCase());let s=contest_data[e][t].solved,r=s==2?"accepted":s==1?"attempted":"notAttempted";n.className=`task-score ${r}`,i++}}}}function setcache(){return[{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0},{data:{},expires:0}]}async function populateTables(){const a=document.getElementById("gym-tab-content");if(!a){console.error("Tables container not found!");return}const r=path.split("/"),t=r.filter(e=>e!=="").pop(),c=t==="semanales"?5:t==="semanales2"?7:t=="cses"?6:t.replace(/\D/g,"");_lvlindxpath=parseInt(c);const l=trainingNames[_lvlindxpath],d=trainingContents[_lvlindxpath],n=document.getElementById("gym-tabs"),s=document.getElementById("gym-tab-content");n.innerHTML="",s.innerHTML="",l.forEach((e,t)=>{const i=document.createElement("li");i.classList.add("nav-item"),i.innerHTML=`
            <button class="nav-link ${t===0?"active":""}" id="tab-${t}"
                data-bs-toggle="tab" data-bs-target="#tab-content-${t}" type="button" role="tab"
                aria-controls="tab-content-${t}" aria-selected="${t===0}">
                ${e}
            </button>`,n.appendChild(i);const o=document.createElement("div");o.classList.add("tab-pane","fade"),t===0&&o.classList.add("show","active"),o.id=`tab-content-${t}`,o.setAttribute("role","tabpanel"),o.setAttribute("aria-labelledby",`tab-${t}`);let a="<h3>Contenidos</h3>";d[t].forEach(e=>{a+=`<span>${e}</span><br/>`}),a+=`
        <div style="overflow-x: auto;">
          <table class="table table-sm table-bordered cses-table" style="table-layout: auto; width: 100%;">
            <thead>
              <tr>
                <th style="position: sticky; left: 0; background-color: #f8f9fa; z-index: 1;">User</th>
              </tr>
            </thead>
            <tbody id="table-body-${t}"></tbody>
          </table>
        </div>
        `,o.innerHTML=a,s.appendChild(o)});let e=localStorage.getItem("gymCache");e!==null?e=JSON.parse(e):e=setcache(),Array.isArray(e)||(e=setcache()),e=setcache();let o=new Date;if(e[_lvlindxpath].expires<o.getTime()){e[_lvlindxpath].data=[];for(let t=0;t<contests_ids[_lvlindxpath].length;t++){const s=contests_ids[_lvlindxpath][t],n=await Promise.resolve(fetchContestStandings(s));console.log(n),n&&(e[_lvlindxpath].data[s]=n)}e[_lvlindxpath].expires=o.getTime()+300*1e3,loadData(e[_lvlindxpath].data,_lvlindxpath)}else loadData(e[_lvlindxpath].data,_lvlindxpath);let i=document.getElementById("loading");i&&(i.style.display="none")}populateTables()